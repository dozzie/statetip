#!/usr/bin/python

import optparse
import sys
import json
import statetip

#-----------------------------------------------------------------------------
# command line options {{{

#-----------------------------------------------------------
# constants class {{{

class Constant:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return "<%s>" % (self.name,)

# }}}
#-----------------------------------------------------------

MODE_READER = Constant("reader")
MODE_SENDER = Constant("sender")

TYPE_RELATED = Constant("related")
TYPE_UNRELATED = Constant("unrelated")
ORIGIN_NULL = Constant("null")

parser = optparse.OptionParser(
    usage =
        "\n  %prog [--reader] [options] [<name> [<origin> [<key>]]]"
        "\n  %prog --sender --name=GROUP_NAME [options]",
    description =
        "StateTip reader and sender command line client.\n"
        '<null> origin is specified as an empty string ("").'
)

parser.add_option(
    "--reader", dest = "mode",
    action = "store_const", const = MODE_READER,
    help = "reader client mode (this is the default)",
)
parser.add_option(
    "--sender", dest = "mode",
    action = "store_const", const = MODE_SENDER,
    help = "sender client mode",
)
parser.set_defaults(mode = MODE_READER)

parser.add_option(
    "--address", dest = "address",
    default = "localhost",
    help = "StateTip address (default: localhost)",
)
parser.add_option(
    "--port", dest = "port", type = "int",
    help = "StateTip port (default: 3012 in sender mode, 3082 in reader mode)",
)

#-----------------------------------------------------------
# reader mode options {{{

reader_group = optparse.OptionGroup(
    parser = parser,
    title = "Reader mode options",
)

reader_group.add_option(
    "--json", dest = "print_json",
    action = "store_true", default = False,
    help = "print all entries as a JSON list (default is to print entries"
           " line by line)",
)

reader_group.add_option(
    "--all", dest = "print_fields",
    action = "store_const", const = ["all"],
    help = "when reading specific origin of value name, print all the values"
           " as JSON objects; when reading specific value, print the whole"
           " value",
)
reader_group.add_option(
    "--state", dest = "print_fields",
    action = "append_const", const = "state",
    help = "when reading specific value, print its state (this is the"
           " default if nothing was specified)",
)
reader_group.add_option(
    "--severity", dest = "print_fields",
    action = "append_const", const = "severity",
    help = "when reading specific value, print its severity",
)
reader_group.add_option(
    "--info", dest = "print_fields",
    action = "append_const", const = "info",
    help = "when reading specific value, print its info field as JSON",
)

parser.add_option_group(reader_group)
parser.set_defaults(print_fields = [])

# }}}
#-----------------------------------------------------------
# sender mode options {{{

sender_group = optparse.OptionGroup(
    parser = parser,
    title = "Sender mode options",
)

sender_group.add_option(
    "--unrelated", dest = "group_type",
    action = "store_const", const = TYPE_UNRELATED,
    help = "values sent are unrelated to each other (this is the default)",
)
sender_group.add_option(
    "--related", dest = "group_type",
    action = "store_const", const = TYPE_RELATED,
    help = "values sent are related to each other",
)

sender_group.add_option(
    "--name", dest = "group_name",
    help = "set value group name (required)",
    metavar = "NAME",
)

sender_group.add_option(
    "--origin", dest = "group_origin",
    help = "set value group's origin (required this or --null-origin option)",
    metavar = "ORIGIN",
)
sender_group.add_option(
    "--null-origin", dest = "group_origin",
    action = "store_const", const = ORIGIN_NULL,
    help = "value group's origin is null (required this or --origin=... option)",
)

sender_group.add_option(
    "--expiry", dest = "expiry", type = "int",
    help = "expiry time for values (default: allow StateTip to set expiry"
           " time)",
    metavar = "SECONDS",
)

parser.add_option_group(sender_group)
parser.set_defaults(group_type = TYPE_UNRELATED)

# }}}
#-----------------------------------------------------------

(options, args) = parser.parse_args()

if options.port is None:
    options.port = 3082 if options.mode is MODE_READER else 3012
if len(options.print_fields) == 0:
    options.print_fields = ["state"]
if "all" in options.print_fields:
    # all the fields will be printed, so no need to print anything else
    options.print_fields = ["all"]

if options.mode is MODE_SENDER and options.group_name is None:
    parser.error("--name=... is required")

if options.mode is MODE_SENDER and len(args) > 0:
    parser.error("excessive arguments for sender mode")

if options.mode is MODE_READER and len(args) > 3:
    parser.error("excessive arguments for reader mode")

# }}}
#-----------------------------------------------------------------------------

if options.mode is MODE_SENDER:
    def read_line(handle, expect_origin):
        line = handle.readline()
        if line == '':
            return None
        fields = line.split()
        if expect_origin:
            if len(fields) > 4 or len(fields) < 2:
                raise ValueError("invalid input line")
            if len(fields) == 4 and \
               fields[-1] not in ["expected", "warning", "error"]:
                raise ValueError("invalid input line")
            fields.extend([None] * (4 - len(fields)))
        else:
            if len(fields) > 3 or len(fields) < 1:
                raise ValueError("invalid input line")
            if len(fields) == 3 and \
               fields[-1] not in ["expected", "warning", "error"]:
                raise ValueError("invalid input line")
            fields.extend([None] * (3 - len(fields)))
        return fields

    expect_origin = (options.group_origin is None)

    try:
        sender = statetip.StateTipSender(
            host = options.address,
            port = options.port,
        )

        result = read_line(sys.stdin, expect_origin)
        while result is not None:
            # either 3 or 4 fields
            (key, state, severity) = result[-3:]

            if expect_origin:
                group_origin = result[0]
            elif options.group_origin is ORIGIN_NULL:
                group_origin = None
            else:
                group_origin = options.group_origin

            sender.send(
                related  = (options.group_type is TYPE_RELATED),
                name     = options.group_name,
                origin   = group_origin,
                key      = key,
                state    = state,
                severity = severity,
                expiry   = options.expiry,
            )
            result = read_line(sys.stdin, expect_origin)
    except KeyboardInterrupt:
        pass
    except statetip.StateTipException, e:
        print >>sys.stderr, "%s" % (e,)
        sys.exit(1)
    except ValueError, e:
        print >>sys.stderr, "%s" % (e,)
        sys.exit(1)

else: # MODE_READER
    reader = statetip.StateTipReader(
        host = options.address,
        port = options.port,
    )

    def dump(data, mode):
        if mode == "string":
            if data is not None:
                print data
        elif mode == "json":
            print json.dumps(data, sort_keys = True)
        elif mode == "list":
            for d in data:
                print d if d is not None else ""
        elif mode == "list-json":
            for d in data:
                print json.dumps(d, sort_keys = True)

    try:
        if len(args) == 0:
            if options.print_json:
                mode = "json"
            else:
                mode = "list"
            dump(reader.names(), mode)
        elif len(args) == 1:
            name = args[0]
            if options.print_json:
                mode = "json"
            else:
                mode = "list"
            dump(reader.origins(name), mode)
        elif len(args) == 2:
            (name, origin) = args
            if origin == "":
                origin = None

            if "all" not in options.print_fields:
                if options.print_json:
                    mode = "json"
                else:
                    mode = "list"
                dump(reader.keys(name, origin), mode)
            else:
                if options.print_json:
                    mode = "json"
                else:
                    mode = "list-json"
                dump(reader.values(name, origin), mode)
        elif len(args) == 3:
            (name, origin, key) = args
            if origin == "":
                origin = None

            value = reader.get(name, origin, key)
            if options.print_json:
                mode = "json"
            else:
                mode = "string"

            for field in options.print_fields:
                if field == "all":
                    dump(value, mode = "json")
                elif field == "info":
                    dump(value["info"], mode = "json")
                elif field == "state" or field == "severity":
                    dump(value[field], mode)
    except KeyboardInterrupt:
        pass
    except statetip.StateTipException, e:
        print >>sys.stderr, "%s" % (e,)
        sys.exit(1)
    except ValueError, e:
        print >>sys.stderr, "%s" % (e,)
        sys.exit(1)

#-----------------------------------------------------------------------------
# vim:ft=python:foldmethod=marker
